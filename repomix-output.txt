This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-28T18:27:09.208Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  404.html
  googlee5bfa023f20e3180.html
  index.html
  robots.txt
  sitemap.xml
src/
  components/
    FeedbackForm.vue
    HelloWorld.vue
    NavBar.vue
  router/
    index.js
  store/
    index.js
  styles/
    buttons.css
    element-variables.scss
    fonts.css
    layout.css
  views/
    DiagnosticsPage.vue
    DiaryPage.vue
    ExercisesPage.vue
    HomePage.vue
    HotlinePage.vue
    OnboardingPage.vue
    ProfilePage.vue
    SettingsPage.vue
    TipsPage.vue
  App.vue
  main.js
.gitignore
babel.config.js
jsconfig.json
package.json
README.md
vue.config.js

================================================================
Files
================================================================

================
File: public/404.html
================
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>ifeellow</title>
    <script type="text/javascript">
      var segmentCount = 1;
      var l = window.location;
      l.replace(
        l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
        '/ifeellow/?p=/' +
        l.pathname.slice(1).split('/').slice(segmentCount).join('/').replace(/&/g, '~and~') +
        (l.search ? '&q=' + l.search.slice(1).replace(/&/g, '~and~') : '') +
        l.hash
      );
    </script>
  </head>
  <body>
  </body>
</html>

================
File: public/googlee5bfa023f20e3180.html
================
google-site-verification: googlee5bfa023f20e3180.html

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="sitemap" type="application/xml" title="Sitemap" href="/ifeellow/sitemap.xml">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Lora:wght@400;500;600&display=swap" rel="stylesheet">
    <title><%= htmlWebpackPlugin.options.title %></title>
    <script type="text/javascript">
      (function(l) {
        if (l.search[1] === 'p') {
          var decoded = l.search.slice(1).split('&').map(function(s) { 
            return s.replace(/~and~/g, '&')
          }).join('?');
          window.history.replaceState(null, null,
            l.pathname.slice(0, -1) + decoded + l.hash
          );
        }
      }(window.location))
    </script>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

================
File: public/robots.txt
================
User-agent: *
Disallow: /ifeellow/sitemap.xml
Allow: /

Sitemap: https://rigsbey.github.io/ifeellow/sitemap.xml

================
File: public/sitemap.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <url>
    <loc>https://rigsbey.github.io/ifeellow/</loc>
    <lastmod>2024-03-14</lastmod>
    <changefreq>weekly</changefreq>
    <priority>1.0</priority>
  </url>
  <url>
    <loc>https://rigsbey.github.io/ifeellow/exercises</loc>
    <lastmod>2024-03-14</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>
  <url>
    <loc>https://rigsbey.github.io/ifeellow/hotline</loc>
    <lastmod>2024-03-14</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.8</priority>
  </url>
  <url>
    <loc>https://rigsbey.github.io/ifeellow/diagnostics</loc>
    <lastmod>2024-03-14</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.7</priority>
  </url>
  <url>
    <loc>https://rigsbey.github.io/ifeellow/tips</loc>
    <lastmod>2024-03-14</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.6</priority>
  </url>
</urlset>

================
File: src/components/FeedbackForm.vue
================
<template>
  <div class="feedback-container" :class="{ 'is-open': isOpen }">
    <div class="feedback-button" @click="toggleForm">
      <el-icon v-if="!isOpen"><ChatLineRound /></el-icon>
      <el-icon v-else><Close /></el-icon>
    </div>

    <div class="feedback-form" v-show="isOpen">
      <h3>Contact Us</h3>
      <p class="form-description">We are here to help. Please send us a message.</p>

      <el-form 
        ref="feedbackForm"
        :model="formData"
        :rules="rules"
        @submit.prevent="handleSubmit"
      >
        <el-form-item prop="message">
          <el-input
            v-model="formData.message"
            type="textarea"
            rows="6"
            placeholder="Your message..."
            resize="none"
          />
        </el-form-item>

        <el-form-item>
          <el-button 
            type="primary" 
            native-type="submit"
            :loading="loading"
            class="submit-button"
          >
            Send
          </el-button>
        </el-form-item>
      </el-form>
    </div>
  </div>
</template>

<script>
import { ref, reactive } from 'vue'
import { ChatLineRound, Close } from '@element-plus/icons-vue'
import emailjs from '@emailjs/browser'
import { ElMessage } from 'element-plus'

export default {
  name: 'FeedbackForm',
  
  components: {
    ChatLineRound,
    Close
  },

  setup() {
    const isOpen = ref(false)
    const loading = ref(false)
    const feedbackForm = ref(null)

    const formData = reactive({
      message: ''
    })

    const rules = {
      message: [
        { required: true, message: 'Please enter a message', trigger: 'blur' }
      ]
    }

    const toggleForm = () => {
      isOpen.value = !isOpen.value
    }

    const handleSubmit = async () => {
      try {
        loading.value = true
        
        await emailjs.send(
          'service_alrbm6a',
          'template_dnvwt7p',
          {
            message: formData.message,
            reply_to: 'anonymous@user.com'
          },
          'BPXhgRofLupqeSc2c'
        )

        ElMessage.success('Message sent successfully')
        formData.message = ''
        isOpen.value = false
      } catch (error) {
        console.error('Error:', error)
        ElMessage.error('Error sending message')
      } finally {
        loading.value = false
      }
    }

    return {
      isOpen,
      loading,
      formData,
      rules,
      feedbackForm,
      toggleForm,
      handleSubmit
    }
  }
}
</script>

<style scoped>
.feedback-container {
  position: fixed;
  bottom: 30px;
  right: 30px;
  z-index: 1000;
}

.feedback-button {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background: #2864A4;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 4px 12px rgba(40, 100, 164, 0.3);
  transition: all 0.3s ease;
}

.feedback-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 16px rgba(40, 100, 164, 0.4);
}

.feedback-form {
  position: absolute;
  bottom: 80px;
  right: 0;
  width: 320px;
  background: white;
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
}

.feedback-form h3 {
  font-family: var(--font-heading);
  font-size: 24px;
  color: #15293E;
  margin-bottom: 8px;
}

.form-description {
  color: #696E76;
  margin-bottom: 24px;
  font-size: 14px;
}

.submit-button {
  width: 100%;
}

@media (max-width: 768px) {
  .feedback-container {
    bottom: 20px;
    right: 20px;
  }

  .feedback-form {
    width: 280px;
  }
}

/* Animations */
.is-open .feedback-button {
  background: #DC3545;
}

:deep(.el-input__wrapper),
:deep(.el-textarea__inner) {
  box-shadow: 0 0 0 1px #E5E7EB inset;
}

:deep(.el-input__wrapper:hover),
:deep(.el-textarea__inner:hover) {
  box-shadow: 0 0 0 1px #2864A4 inset;
}

:deep(.el-button--primary) {
  background: #2864A4;
  border-color: #2864A4;
}

:deep(.el-button--primary:hover) {
  background: #1e4f8a;
  border-color: #1e4f8a;
}
</style>

================
File: src/components/HelloWorld.vue
================
<template>
  <div class="hello">
    <h1>{{ msg }}</h1>
    <p>
      For a guide and recipes on how to configure / customize this project,<br>
      check out the
      <a href="https://cli.vuejs.org" target="_blank" rel="noopener">vue-cli documentation</a>.
    </p>
    <h3>Installed CLI Plugins</h3>
    <ul>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel" target="_blank" rel="noopener">babel</a></li>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">eslint</a></li>
    </ul>
    <h3>Essential Links</h3>
    <ul>
      <li><a href="https://vuejs.org" target="_blank" rel="noopener">Core Docs</a></li>
      <li><a href="https://forum.vuejs.org" target="_blank" rel="noopener">Forum</a></li>
      <li><a href="https://chat.vuejs.org" target="_blank" rel="noopener">Community Chat</a></li>
      <li><a href="https://twitter.com/vuejs" target="_blank" rel="noopener">Twitter</a></li>
      <li><a href="https://news.vuejs.org" target="_blank" rel="noopener">News</a></li>
    </ul>
    <h3>Ecosystem</h3>
    <ul>
      <li><a href="https://router.vuejs.org" target="_blank" rel="noopener">vue-router</a></li>
      <li><a href="https://vuex.vuejs.org" target="_blank" rel="noopener">vuex</a></li>
      <li><a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">vue-devtools</a></li>
      <li><a href="https://vue-loader.vuejs.org" target="_blank" rel="noopener">vue-loader</a></li>
      <li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li>
    </ul>
  </div>
</template>

<script>
export default {
  name: 'HelloWorld',
  props: {
    msg: String
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
h3 {
  margin: 40px 0 0;
}
ul {
  list-style-type: none;
  padding: 0;
}
li {
  display: inline-block;
  margin: 0 10px;
}
a {
  color: #42b983;
}
</style>

================
File: src/components/NavBar.vue
================
<template>
  <div class="nav-container">
    <div class="nav-content">
      <el-menu 
        :default-active="activeMenu" 
        mode="horizontal" 
        router
        class="nav-menu"
      >
        <el-menu-item index="/">
          <PhHouse weight="bold" />
          Home
        </el-menu-item>
        <el-menu-item index="/diagnostics">
          <PhClipboardText weight="bold" />
          Diagnostics
        </el-menu-item>
        <el-menu-item index="/exercises">
          <PhHeartbeat weight="bold" />
          Exercises
        </el-menu-item>
        <el-menu-item index="/hotline">
          <PhPhone weight="bold" />
          Hotline
        </el-menu-item>
      </el-menu>
    </div>
  </div>
</template>

<script>
import { computed } from 'vue'
import { useRoute } from 'vue-router'
import { 
  PhHouse, 
  PhClipboardText,
  PhHeartbeat,
  PhPhone,
} from '@phosphor-icons/vue'

export default {
  name: 'NavBar',
  components: {
    PhHouse,
    PhClipboardText,
    PhHeartbeat,
    PhPhone,
  },
  setup() {
    const route = useRoute()
    const activeMenu = computed(() => route.path)

    return {
      activeMenu
    }
  }
}
</script>

<style scoped>
.nav-container {
  background: white;
  border-bottom: 1px solid #F0F1F6;
}

.nav-content {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  height: 60px;
  display: flex;
  align-items: center;
}

@media (min-width: 1400px) {
  .nav-content {
    max-width: 1000px;
  }
}

.nav-menu {
  flex: 1;
  display: flex;
  justify-content: center;
  border-bottom: none;
}

:deep(.el-menu) {
  border-bottom: none;
}

:deep(.el-menu-item) {
  font-size: 16px;
  height: 60px;
  line-height: 60px;
}

:deep(.el-menu-item.is-active) {
  color: #2864A4;
  border-bottom: 2px solid #2864A4;
}

@media (max-width: 768px) {
  .nav-content {
    padding: 0 16px;
  }

  :deep(.el-menu-item) {
    padding: 0 12px;
    font-size: 14px;
  }
}
</style>

================
File: src/router/index.js
================
import { createRouter, createWebHistory } from 'vue-router';
import DiaryPage from '../views/DiaryPage.vue';
import TipsPage from '../views/TipsPage.vue';
import SettingsPage from '../views/SettingsPage.vue';
import DiagnosticsPage from '../views/DiagnosticsPage.vue';
import ExercisesPage from '../views/ExercisesPage.vue';
import HotlinePage from '../views/HotlinePage.vue';
import HomePage from '@/views/HomePage.vue';

const routes = [
  {
    path: '/',
    name: 'Home',
    component: HomePage
  },
  {
    path: '/diary',
    name: 'Diary',
    component: DiaryPage
  },
  {
    path: '/tips',
    name: 'Tips',
    component: TipsPage
  },
  {
    path: '/settings',
    name: 'Settings',
    component: SettingsPage
  },
  {
    path: '/diagnostics',
    name: 'Diagnostics',
    component: DiagnosticsPage
  },
  {
    path: '/exercises',
    name: 'Exercises',
    component: ExercisesPage
  },
  {
    path: '/hotline',
    name: 'Hotline',
    component: HotlinePage
  },
  {
    path: '/:pathMatch(.*)*',
    redirect: '/'
  }
];

const router = createRouter({
  history: createWebHistory('/ifeellow/'),
  routes
});

// Проверка первого посещения
router.beforeEach((to, from, next) => {
  console.log('Route change:', to.path); // Добавьте для отладки
  const visitedBefore = localStorage.getItem('visitedBefore');
  if (to.meta.skipIfVisited && visitedBefore === 'true') {
    next('/home');
  } else {
    next();
  }
});

export default router;

================
File: src/store/index.js
================
import { createStore } from 'vuex';

export const store = createStore({
  state: {
    theme: localStorage.getItem('theme') || 'light',
    notifications: {
      email: localStorage.getItem('emailNotifications') === 'true',
      browser: localStorage.getItem('browserNotifications') === 'true'
    },
    userState: {
      currentMood: null,
      diagnosticsResults: null,
      lastExercise: null
    },
    diaryEntries: JSON.parse(localStorage.getItem('diaryEntries')) || [],
    visitedBefore: localStorage.getItem('visitedBefore') === 'true'
  },
  
  mutations: {
    setTheme(state, theme) {
      state.theme = theme;
      localStorage.setItem('theme', theme);
      document.body.setAttribute('data-theme', theme);
    },
    
    setNotifications(state, { type, value }) {
      state.notifications[type] = value;
      localStorage.setItem(`${type}Notifications`, value);
    },
    
    setVisitedBefore(state) {
      state.visitedBefore = true;
      localStorage.setItem('visitedBefore', 'true');
    },
    
    addDiaryEntry(state, entry) {
      state.diaryEntries.push({
        ...entry,
        id: Date.now(),
        date: new Date().toISOString()
      });
      localStorage.setItem('diaryEntries', JSON.stringify(state.diaryEntries));
    },
    
    updateUserState(state, { key, value }) {
      state.userState[key] = value;
    }
  },
  
  actions: {
    async initializeApp({ commit, state }) {
      // Инициализация уведомлений браузера
      if (state.notifications.browser) {
        try {
          const permission = await Notification.requestPermission();
          commit('setNotifications', { type: 'browser', value: permission === 'granted' });
        } catch (error) {
          console.error('Ошибка при запросе разрешений уведомлений:', error);
        }
      }
    },
    
    async scheduleNotification({ state }, { title, body }) {
      if (state.notifications.browser && Notification.permission === 'granted') {
        new Notification(title, { body });
      }
    }
  }
});

================
File: src/styles/buttons.css
================
.action-button {
  background: transparent;
  border: 1px solid #E5E7EB;
  border-radius: 8px;
  padding: 12px 24px;
  color: #374151;
  display: flex;
  align-items: center;
  gap: 8px;
  cursor: pointer;
  transition: all 0.2s ease;
}

.action-button:hover {
  background: #F9FAFB;
  border-color: #D1D5DB;
}

.action-button i {
  font-size: 20px;
}

.action-button--text {
  border: none;
  padding: 8px 16px;
}

.action-button--text:hover {
  background: transparent;
  color: #111827;
}

================
File: src/styles/element-variables.scss
================
/* Переопределение переменных Element Plus */
$--color-primary: #6c63ff; // Основной цвет
$--color-secondary: #ff7f50; // Акцентный цвет (теплый оранжевый)
$--color-background: #f5f5f5; // Фоновый цвет
$--font-size-large: 18px;
$--font-size-medium: 16px;
$--font-size-small: 14px; // Новый размер шрифта

// Используем Rubik как основной шрифт
$--font-family: 'Rubik', sans-serif;

// Применяем шрифт Rubik для всех элементов Element Plus
:root {
  --el-font-family: 'Rubik', sans-serif;
  --el-button-bg-color: transparent;
  --el-button-border-color: #E5E7EB;
  --el-button-hover-bg-color: #F9FAFB;
  --el-button-hover-border-color: #D1D5DB;
  --el-button-active-bg-color: #F3F4F6;
  --el-button-active-border-color: #9CA3AF;
  --el-button-text-color: #374151;
}

:deep(.el-button) {
  box-shadow: none;
}

:deep(.el-button:hover) {
  transform: translateY(-1px);
}

================
File: src/styles/fonts.css
================
@font-face {
  font-family: 'Gilroy';
  src: url('../assets/fonts/Gilroy-Regular.woff2') format('woff2'),
       url('../assets/fonts/Gilroy-Regular.woff') format('woff');
  font-weight: 400;
  font-style: normal;
}

@font-face {
  font-family: 'Gilroy';
  src: url('../assets/fonts/Gilroy-Bold.woff2') format('woff2'),
       url('../assets/fonts/Gilroy-Bold.woff') format('woff');
  font-weight: 700;
  font-style: normal;
}

/* Подключаем шрифты через Google Fonts */
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@500;600;700&family=Rubik:wght@400;500&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Lora:wght@400;500&family=Montserrat:wght@400;600;700&display=swap');

/* Обновляем переменные шрифтов */
:root {
  --font-heading: 'Montserrat', sans-serif; /* Заголовки */
  --font-body: 'Lora', serif; /* Основной текст */
}

/* Применяем шрифты к основным элементам */
body {
  font-family: var(--font-body);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Заголовки */
h1, h2, h3, h4, h5, h6,
.section-title,
.main-title {
  font-family: var(--font-heading);
}

/* Обновляем стили Element Plus */
:deep(.el-button),
:deep(.el-input__inner),
:deep(.el-menu-item) {
  font-family: var(--font-body);
}

/* Специальные классы */
.heading-font {
  font-family: var(--font-heading);
}

.body-font {
  font-family: var(--font-body);
}

================
File: src/styles/layout.css
================
.main-content {
  max-width: 1200px;
  margin: 0 auto;
  padding: 40px 20px;
  width: 100%;
  box-sizing: border-box;
}

@media (min-width: 1400px) {
  .main-content {
    max-width: 1000px;
  }
}

.content {
  background: white;
  border-radius: 16px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  padding: 40px;
  width: 100%;
  box-sizing: border-box;
}

.section-title {
  font-size: 28px;
  font-weight: 700;
  color: #15293E;
  margin-bottom: 16px;
}

.description {
  color: #696E76;
  font-size: 16px;
  line-height: 1.5;
  margin-bottom: 32px;
}

.recommendation-buttons {
  display: flex;
  gap: 16px;
}

.recommendation-button {
  background: transparent;
  border: 1px solid #E5E7EB;
  border-radius: 8px;
  padding: 12px 24px;
  color: #374151;
  transition: all 0.2s ease;
}

.recommendation-button:hover {
  background: #F9FAFB;
  border-color: #D1D5DB;
}

/* Заголовки */
h1, h2, h3, h4, h5, h6,
.section-title,
.main-title {
  font-family: var(--font-heading);
}

/* Основной текст */
body {
  font-family: var(--font-body);
}

================
File: src/views/DiagnosticsPage.vue
================
<template>
  <div class="content-container">
    <div class="content-card">
      <h2 class="section-title">Diagnostics</h2>
      <p class="description">
        Answer a few questions to help us understand your current state
        and provide the most appropriate support.
      </p>

      <div class="diagnostics-content" v-if="!testCompleted">
        <el-steps :active="currentStep" finish-status="success" class="steps">
          <el-step v-for="(question, index) in questions" :key="index" :title="`Question ${index + 1}`" />
        </el-steps>

        <div class="question-card">
          <h3>{{ currentQuestion.text }}</h3>
          
          <div class="answers">
            <el-radio-group v-model="currentAnswer">
              <el-radio 
                v-for="(answer, index) in currentQuestion.answers" 
                :key="index" 
                :label="index"
                border
              >
                {{ answer.text }}
              </el-radio>
            </el-radio-group>
          </div>

          <div class="navigation-buttons">
            <el-button 
              v-if="currentStep > 0" 
              @click="previousQuestion"
            >
              Back
            </el-button>
            <el-button 
              type="primary" 
              @click="nextQuestion"
              :disabled="currentAnswer === null"
            >
              {{ currentStep === questions.length - 1 ? 'Finish' : 'Next' }}
            </el-button>
          </div>
        </div>
      </div>

      <div class="results" v-else>
        <h3>Diagnostic Results</h3>
        <div class="result-summary">
          <p>{{ getSummary }}</p>
        </div>

        <div class="recommendations">
          <h4>Recommended actions:</h4>
          <div class="recommendation-buttons">
            <el-button 
              class="recommendation-button" 
              @click="$router.push('/exercises#breathing')"
            >
              <PhWind class="tag-icon" />
              Do breathing exercises
            </el-button>
            
            <el-button 
              class="recommendation-button" 
              @click="$router.push('/exercises#grounding')"
            >
              <PhTree class="tag-icon" />
              Try grounding techniques
            </el-button>
            
            <el-button 
              class="recommendation-button" 
              @click="$router.push('/diary')"
            >
              <PhNotebook class="tag-icon" />
              Write your thoughts in the diary
            </el-button>
          </div>
        </div>

        <div class="action-buttons">
          <el-button type="primary" @click="$router.push('/exercises')">
            Go to Exercises
          </el-button>
          <el-button type="danger" @click="$router.push('/hotline')">
            Get Professional Help
          </el-button>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, computed } from 'vue'
import { PhWind, PhTree, PhNotebook } from '@phosphor-icons/vue'

export default {
  name: 'DiagnosticsPage',
  components: {
    PhWind,
    PhTree,
    PhNotebook
  },
  setup() {
    const currentStep = ref(0)
    const currentAnswer = ref(null)
    const testCompleted = ref(false)
    const answers = ref([])

    const questions = [
      {
        text: "How would you rate your current emotional state?",
        answers: [
          { text: "I feel good", value: 0 },
          { text: "I feel slightly anxious", value: 1 },
          { text: "I feel very anxious", value: 2 },
          { text: "I feel overwhelmed", value: 3 }
        ]
      },
      {
        text: "How strong are these feelings?",
        answers: [
          { text: "Very strong", score: 3 },
          { text: "Moderate", score: 2 },
          { text: "Weak", score: 1 }
        ]
      },
      {
        text: "How long has this been going on?",
        answers: [
          { text: "A few hours", score: 1 },
          { text: "A few days", score: 2 },
          { text: "More than a week", score: 3 }
        ]
      },
      {
        text: "Does this affect your daily life?",
        answers: [
          { text: "Yes, significantly", score: 3 },
          { text: "A little", score: 2 },
          { text: "Almost not at all", score: 1 }
        ]
      },
      {
        text: "Do you have thoughts of self-harm?",
        answers: [
          { text: "Yes", score: 3 },
          { text: "Sometimes", score: 2 },
          { text: "No", score: 0 }
        ]
      }
    ]

    const currentQuestion = computed(() => questions[currentStep.value])

    const getSummary = computed(() => {
      const totalScore = answers.value.reduce((sum, answer) => {
        return sum + questions[answer.questionIndex].answers[answer.answerIndex].score
      }, 0)

      if (totalScore >= 12) {
        return 'Your condition requires attention. We recommend contacting a specialist.'
      } else if (totalScore >= 8) {
        return 'You have an elevated level of stress. Try relaxation techniques.'
      } else {
        return 'Your condition is normal, but you can improve your well-being with our exercises.'
      }
    })

    const recommendations = computed(() => {
      const totalScore = answers.value.reduce((sum, answer) => {
        return sum + questions[answer.questionIndex].answers[answer.answerIndex].score
      }, 0)

      if (totalScore >= 12) {
        return [
          'Contact a psychologist immediately',
          'Call the crisis hotline',
          'Don\'t stay alone'
        ]
      } else if (totalScore >= 8) {
        return [
          'Do breathing exercises',
          'Try grounding techniques',
          'Write your thoughts in the diary'
        ]
      } else {
        return [
          'Regularly do relaxation exercises',
          'Keep an emotion diary',
          'Read our stress management tips'
        ]
      }
    })

    const nextQuestion = () => {
      if (currentAnswer.value !== null) {
        answers.value[currentStep.value] = {
          questionIndex: currentStep.value,
          answerIndex: currentAnswer.value
        }
        
        if (currentStep.value < questions.length - 1) {
          currentStep.value++
          currentAnswer.value = null
        } else {
          testCompleted.value = true
        }
      }
    }

    const previousQuestion = () => {
      if (currentStep.value > 0) {
        currentStep.value--
        currentAnswer.value = answers.value[currentStep.value]?.answerIndex || null
      }
    }

    return {
      currentStep,
      currentAnswer,
      testCompleted,
      questions,
      currentQuestion,
      getSummary,
      recommendations,
      nextQuestion,
      previousQuestion
    }
  }
}
</script>

<style scoped>
.content-container {
  padding: 30px 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.content-card {
  background: white;
  border-radius: 16px;
  padding: 40px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.section-title {
  font-size: 32px;
  font-weight: 700;
  color: #15293E;
  margin-bottom: 16px;
}

.steps {
  margin-bottom: 40px;
}

.question-card {
  background: white;
  border-radius: 10px;
  padding: 30px;
  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);
}

.answers {
  margin: 30px 0;
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.navigation-buttons {
  display: flex;
  justify-content: space-between;
  margin-top: 30px;
}

.results {
  background: white;
  border-radius: 10px;
  padding: 30px;
  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);
}

.result-summary {
  margin: 20px 0;
  padding: 20px;
  background: #F8F9FC;
  border-radius: 8px;
}

.recommendations {
  margin: 30px 0;
}

.recommendation-buttons {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  margin: 20px 0;
}

.recommendation-button {
  background: #E0F7FA;
  border: 1px solid #B2EBF2;
  color: #00796B;
  transition: all 0.2s ease;
}

.recommendation-button:hover {
  background: #B2EBF2;
  border-color: #80DEEA;
}

.tag-icon {
  width: 18px;
  height: 18px;
}

.action-buttons {
  display: flex;
  gap: 20px;
  margin-top: 30px;
}

.description {
  font-family: var(--font-body);
}

/* Цвета для иконок */
.phone-icon {
  fill: #C8FACC; /* Светло-зеленый для иконки звонка */
}

.copy-icon {
  fill: #D0F0FD; /* Светло-голубой для иконки копирования */
}

/* Цвета для значков "24/7" и "Free" */
.icon-24-7 {
  background: #F4F9FF; /* Нежный голубой фон */
  color: #4A90E2; /* Синий текст для акцента */
}
</style>

================
File: src/views/DiaryPage.vue
================
<template>
  <div class="container">
    <div class="main-content">
      <div class="content">
        <h2 class="section-title">Diary</h2>
        <p class="description">
          Here you can write down your thoughts and feelings.
          Keeping a diary helps you better understand yourself and your emotions.
        </p>

        <div class="diary-form">
          <div class="form-group">
            <label>Date</label>
            <el-date-picker
              v-model="entryDate"
              type="date"
              placeholder="Select date"
              format="DD.MM.YYYY"
              value-format="YYYY-MM-DD"
            />
          </div>

          <div class="form-group">
            <label>How are you feeling today?</label>
            <el-rate
              v-model="mood"
              :colors="['#99A9BF', '#F7BA2A', '#FF9900']"
              :texts="['Bad', 'Okay', 'Good', 'Very Good', 'Excellent']"
              show-text
            />
          </div>

          <div class="form-group">
            <label>Your thoughts</label>
            <el-input
              v-model="entry"
              type="textarea"
              :rows="6"
              placeholder="Describe your thoughts and feelings..."
              resize="none"
            />
          </div>

          <div class="form-actions">
            <el-button type="primary" @click="saveEntry">
              Save entry
            </el-button>
          </div>
        </div>

        <div class="previous-entries" v-if="entries.length > 0">
          <h3 class="subsection-title">Previous entries</h3>
          <el-timeline>
            <el-timeline-item
              v-for="entry in entries"
              :key="entry.id"
              :timestamp="entry.date"
              placement="top"
            >
              <el-card class="entry-card">
                <div class="entry-mood">
                  Mood: <el-rate v-model="entry.mood" disabled />
                </div>
                <p class="entry-text">{{ entry.text }}</p>
              </el-card>
            </el-timeline-item>
          </el-timeline>
        </div>
      </div>
    </div>

    <div class="footer">
      <div class="footer-logo">THNX</div>
      <router-link to="/privacy">Privacy Policy</router-link>
      <router-link to="/terms">Terms of Service</router-link>
      <span>Powered by <span class="open-source">Open Source</span></span>
    </div>
  </div>
</template>

<script>
export default {
  name: 'DiaryPage',
  data() {
    return {
      entryDate: new Date().toISOString().split('T')[0],
      entry: '',
      mood: 3,
      entries: [
        {
          id: 1,
          date: '2024-03-19',
          mood: 4,
          text: 'Today was a productive day. I feel motivated.'
        },
        {
          id: 2,
          date: '2024-03-18',
          mood: 3,
          text: "A regular day. I'm a bit tired, but overall it's okay."
        }
      ]
    };
  },
  methods: {
    saveEntry() {
      const newEntry = {
        id: this.entries.length + 1,
        date: this.entryDate,
        mood: this.mood,
        text: this.entry
      };
      
      this.entries.unshift(newEntry);
      this.entry = '';
      this.mood = 3;
      
      this.$message({
        message: 'Entry saved',
        type: 'success'
      });
    }
  }
};
</script>

<style scoped>
.container {
  max-width: 1440px;
  margin: 0 auto;
  position: relative;
  min-height: 100vh;
  background: #FAFAFD;
}

.main-content {
  padding: 0 130px;
  margin-bottom: 100px;
}

.content {
  background: white;
  border-radius: 10px;
  box-shadow: 0px 0px 40px rgba(0, 0, 0, 0.05);
  padding: 40px;
}

.section-title {
  font-size: 28px;
  font-weight: 700;
  color: #15293E;
  margin-bottom: 16px;
}

.description {
  font-size: 16px;
  color: #696E76;
  margin-bottom: 40px;
  line-height: 1.6;
}

.diary-form {
  max-width: 800px;
}

.form-group {
  margin-bottom: 30px;
}

.form-group label {
  display: block;
  color: #696E76;
  margin-bottom: 10px;
  font-weight: 500;
}

.form-actions {
  margin-top: 30px;
}

.subsection-title {
  font-size: 24px;
  font-weight: 600;
  color: #15293E;
  margin: 40px 0 24px;
}

.entry-card {
  margin-bottom: 20px;
}

.entry-mood {
  margin-bottom: 16px;
  color: #696E76;
}

.entry-text {
  color: #15293E;
  line-height: 1.6;
}

.footer {
  margin-top: 40px;
  background: #F0F1F6;
  padding: 25px 130px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 185px;
}

.footer-logo {
  background: #E31235;
  width: 50px;
  height: 38px;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
}

.footer a {
  color: inherit;
  text-decoration: none;
}

.footer a:hover {
  color: #2864A4;
}

.open-source {
  color: #2864A4;
}

/* Стили для Element Plus компонентов */
:deep(.el-input__inner),
:deep(.el-textarea__inner) {
  background: #F8F9FC;
  border: none;
  border-radius: 10px;
  padding: 12px 20px;
}

:deep(.el-textarea__inner) {
  min-height: 150px;
}

:deep(.el-button--primary) {
  background-color: #2864A4;
  border-color: #2864A4;
  padding: 12px 40px;
  font-size: 16px;
  height: auto;
  border-radius: 10px;
}

:deep(.el-button--primary:hover) {
  background-color: #1e4f8a;
  border-color: #1e4f8a;
}

:deep(.el-timeline-item__node) {
  background-color: #2864A4;
}

:deep(.el-timeline-item__timestamp) {
  color: #696E76;
}

:deep(.el-card) {
  border: none;
  border-radius: 10px;
  box-shadow: 0px 0px 40px rgba(0, 0, 0, 0.05);
}

:deep(.el-rate) {
  margin-top: 8px;
}

:deep(.el-date-editor) {
  width: 100%;
  max-width: 200px;
}
</style>

================
File: src/views/ExercisesPage.vue
================
<template>
  <div class="content-container">
    <div class="content-card">
      <h2 class="section-title">Exercises</h2>
      <p class="description">
        Here are techniques and exercises that will help you relieve tension
        and improve your emotional state.
      </p>

      <div class="exercises-content">
        <el-tabs v-model="activeExercise">
          <el-tab-pane label="4-4-6 Breathing" name="breathing">
            <div class="exercise-card">
              <h3>Breathing Exercise</h3>
              <p>Follow the animation and breathe in the indicated rhythm:</p>
              
              <div class="animation-container">
                <div class="breathing-text" v-if="isBreathingActive">
                  {{ breathingPhase }}
                </div>
                
                <dotlottie-player
                  ref="lottiePlayer"
                  src="/ifeellow/breathing-animation.lottie"
                  background="transparent"
                  speed="1"
                  style="width: 300px; height: 300px;"
                  :autoplay="false"
                  :loop="true"
                ></dotlottie-player>
                
                <el-button 
                  type="primary"
                  class="breathing-button" 
                  @click="toggleBreathing"
                  size="large"
                >
                  {{ isBreathingActive ? 'Stop' : 'Start' }}
                </el-button>
              </div>
            </div>
          </el-tab-pane>

          <el-tab-pane label="Let Thoughts Fly" name="thoughts">
            <div class="exercise-card">
              <h3>Let Your Thoughts Go</h3>
              <p>Write down what's bothering you, and watch it dissolve into the air.</p>
              
              <div class="thoughts-exercise input-container" v-if="!isThoughtFlying">
                <el-input
                  v-model="thought"
                  type="textarea"
                  :rows="4"
                  placeholder="Describe your worry, fear, or unpleasant feeling..."
                  :disabled="isThoughtFlying"
                />
                
                <el-button 
                  type="primary" 
                  @click="letThoughtFly"
                  :disabled="!thought"
                  class="release-button"
                >
                  Let it go
                </el-button>
              </div>
              
              <div v-else class="flying-thought-container">
                <div class="particles">
                  <div v-for="n in 12" :key="n" class="particle"></div>
                </div>
                <transition name="fade">
                  <div v-if="showThought" class="flying-thought">
                    {{ thought }}
                  </div>
                </transition>
                
                <transition name="fade">
                  <div v-if="showCompletionMessage" class="completion-message">
                    <h4>You've let it go</h4>
                    <p>Your thoughts no longer have power over you</p>
                    <el-button @click="resetExercise">Try again</el-button>
                  </div>
                </transition>
              </div>
            </div>
          </el-tab-pane>

          <el-tab-pane label="Grounding" name="grounding">
            <div class="exercise-card">
              <h3>Grounding Technique</h3>
              <p>Let's explore your surroundings together. This will help you calm down and return to the present moment.</p>
              
              <div class="grounding-steps">
                <div class="progress-circles">
                  <div 
                    v-for="(step, index) in ['Sight', 'Touch', 'Sound', 'Smell', 'Taste']" 
                    :key="step"
                    class="progress-step"
                    :class="{
                      'active': index === groundingStep,
                      'completed': index < groundingStep
                    }"
                  >
                    <div class="step-icon">
                      <el-icon v-if="index === 0"><View /></el-icon>
                      <el-icon v-if="index === 1"><Pointer /></el-icon>
                      <el-icon v-if="index === 2"><Headset /></el-icon>
                      <el-icon v-if="index === 3"><Compass /></el-icon>
                      <el-icon v-if="index === 4"><ForkSpoon /></el-icon>
                    </div>
                    <span class="step-name">{{ step }}</span>
                  </div>
                </div>
                
                <div class="step-content" :key="groundingStep">
                  <div v-if="groundingStep === 0" class="sense-group">
                    <div class="step-header">
                      <h4>What do you see around you?</h4>
                      <p class="step-hint">Look around and write down 5 items that caught your attention</p>
                    </div>
                    <div class="input-cards">
                      <div 
                        v-for="i in 5" 
                        :key="`see-${i}`" 
                        class="input-card"
                        :class="{ 'filled': grounding.see[i-1].trim() !== '' }"
                      >
                        <el-input
                          v-model="grounding.see[i-1]"
                          :placeholder="getVisualPlaceholder(i)"
                          @input="checkStepCompletion"
                        />
                      </div>
                    </div>
                    <div class="step-navigation">
                      <el-button 
                        type="primary" 
                        @click="nextGroundingStep"
                        :disabled="!isCurrentStepComplete"
                      >
                        Next
                      </el-button>
                    </div>
                  </div>
                 
                  <div v-if="groundingStep === 1" class="sense-group">
                    <div class="step-header">
                      <h4>What do you feel on your body?</h4>
                      <p class="step-hint">Feel 4 different sensations</p>
                    </div>
                    <div class="input-cards">
                      <div 
                        v-for="i in 4" 
                        :key="`feel-${i}`" 
                        class="input-card"
                        :class="{ 'filled': grounding.feel[i-1].trim() !== '' }"
                      >
                        <el-input
                          v-model="grounding.feel[i-1]"
                          :placeholder="getTactilePlaceholder(i)"
                          @input="checkStepCompletion"
                        />
                      </div>
                    </div>
                    <div class="step-navigation">
                      <el-button 
                        type="primary" 
                        @click="nextGroundingStep"
                        :disabled="!isCurrentStepComplete"
                      >
                        Next
                      </el-button>
                    </div>
                  </div>
                 
                  <div v-if="groundingStep === 2" class="sense-group">
                    <div class="step-header">
                      <h4>What do you hear around you?</h4>
                      <p class="step-hint">Write down 3 sounds you hear</p>
                    </div>
                    <div class="input-cards">
                      <div 
                        v-for="i in 3" 
                        :key="`hear-${i}`" 
                        class="input-card"
                        :class="{ 'filled': grounding.hear[i-1].trim() !== '' }"
                      >
                        <el-input
                          v-model="grounding.hear[i-1]"
                          :placeholder="getAuditoryPlaceholder(i)"
                          @input="checkStepCompletion"
                        />
                      </div>
                    </div>
                    <div class="step-navigation">
                      <el-button 
                        type="primary" 
                        @click="nextGroundingStep"
                        :disabled="!isCurrentStepComplete"
                      >
                        Next
                      </el-button>
                    </div>
                  </div>
                 
                  <div v-if="groundingStep === 3" class="sense-group">
                    <div class="step-header">
                      <h4>What do you smell around you?</h4>
                      <p class="step-hint">Write down 2 scents you smell</p>
                    </div>
                    <div class="input-cards">
                      <div 
                        v-for="i in 2" 
                        :key="`smell-${i}`" 
                        class="input-card"
                        :class="{ 'filled': grounding.smell[i-1].trim() !== '' }"
                      >
                        <el-input
                          v-model="grounding.smell[i-1]"
                          :placeholder="getOlfactoryPlaceholder(i)"
                          @input="checkStepCompletion"
                        />
                      </div>
                    </div>
                    <div class="step-navigation">
                      <el-button 
                        type="primary" 
                        @click="nextGroundingStep"
                        :disabled="!isCurrentStepComplete"
                      >
                        Next
                      </el-button>
                    </div>
                  </div>
                 
                  <div v-if="groundingStep === 4" class="sense-group">
                    <div class="step-header">
                      <h4>What do you taste on your tongue?</h4>
                      <p class="step-hint">Write down your taste</p>
                    </div>
                    <div class="input-cards">
                      <div 
                        class="input-card"
                        :class="{ 'filled': grounding.taste.trim() !== '' }"
                      >
                        <el-input
                          v-model="grounding.taste"
                          :placeholder="getGustatoryPlaceholder()"
                          @input="checkStepCompletion"
                        />
                      </div>
                    </div>
                    <div class="step-navigation">
                      <el-button 
                        type="primary" 
                        @click="nextGroundingStep"
                        :disabled="!isCurrentStepComplete"
                      >
                        Next
                      </el-button>
                    </div>
                  </div>
                </div>
                
                <div v-if="groundingStep === 5" class="completion-message">
                  <h4>Great! You've completed the exercise</h4>
                  <p>Now you are fully present in the current moment</p>
                  <el-button type="primary" @click="resetGrounding">
                    Start Over
                  </el-button>
                </div>
              </div>
            </div>
          </el-tab-pane>

          <el-tab-pane label="Meditation" name="meditation">
            <div class="exercise-card">
              <h3>Relaxing Meditation</h3>
              <p>Listen to the audio and follow the instructions:</p>

              <div class="video-container">
                <iframe
                  width="100%"
                  height="400"
                  src="https://www.youtube.com/embed/inpok4MKVLM"
                  title="Meditation Video"
                  frameborder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowfullscreen
                ></iframe>
              </div>
            </div>
          </el-tab-pane>
        </el-tabs>

        <div class="feedback-section" v-if="showFeedback">
          <h3>How do you feel after the exercise?</h3>
          <div class="feedback-buttons">
            <el-button @click="submitFeedback('better')">Better</el-button>
            <el-button @click="submitFeedback('slightly-better')">Slightly Better</el-button>
            <el-button @click="submitFeedback('same')">No Change</el-button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, onBeforeUnmount, watch } from 'vue'
import { gsap } from 'gsap'
import anime from 'animejs'
import { 
  View, 
  Pointer,
  Headset,
  Compass,
  ForkSpoon
} from '@element-plus/icons-vue'
import { DotLottiePlayer } from '@dotlottie/player-component'

console.log('Компонент ExercisesPage инициализирован')

const isBreathingActive = ref(false)
const showFeedback = ref(false)
const activeExercise = ref('breathing')
const thought = ref('')
const isThoughtFlying = ref(false)
const showThought = ref(false)
const showCompletionMessage = ref(false)
const groundingStep = ref(0)
const isCurrentStepComplete = ref(false)
const breathingPhase = ref('')
const lottiePlayer = ref(null)

// Отслеживаем изменение активного упражнения
watch(activeExercise, (newValue) => {
  console.log('Выбрано упражнение:', newValue)
})

const grounding = ref({
  see: ['', '', '', '', ''],
  feel: ['', '', '', ''],
  hear: ['', '', ''],
  smell: ['', ''],
  taste: ''
})

onMounted(() => {
  console.log('Компонент смонтирован')
  // Проверяем, зарегистрирован ли компонент
  if (!customElements.get('dotlottie-player')) {
    customElements.define('dotlottie-player', DotLottiePlayer)
  }
})

onBeforeUnmount(() => {
  console.log('Компонент будет размонтирован')
  stopBreathing()
})

const toggleBreathing = () => {
  console.log('Переключение состояния дыхательного упражнения')
  if (isBreathingActive.value) {
    console.log('Останавливаем упражнение')
    stopBreathing()
  } else {
    console.log('Начинаем упражнение')
    startBreathing()
  }
}

const startBreathing = () => {
  console.log('Начинаем упражнение')
  isBreathingActive.value = true
  
  const player = document.querySelector('dotlottie-player')
  if (player) {
    console.log('Запускаем анимацию')
    player.play()
    
    gsap.timeline({ repeat: -1 })
      .to(breathingPhase, {
        duration: 4,
        onStart: () => breathingPhase.value = 'Breathe in...',
      })
      .to(breathingPhase, {
        duration: 4,
        onStart: () => breathingPhase.value = 'Hold...',
      })
      .to(breathingPhase, {
        duration: 6,
        onStart: () => breathingPhase.value = 'Breathe out...',
      })
  }
}

const stopBreathing = () => {
  console.log('Останавливаем упражнение')
  isBreathingActive.value = false
  breathingPhase.value = ''
  
  const player = document.querySelector('dotlottie-player')
  if (player) {
    player.stop()
  }
  
  gsap.killTweensOf(breathingPhase)
  
  showFeedback.value = true
  console.log('Показываем форму обратной связи')
}

const submitFeedback = (result) => {
  console.log('Получена обратная связь:', result)
  console.log('Сохранение результата упражнения')
  showFeedback.value = false
}

// Отслеживаем изменения в форме заземления
watch(() => grounding.value, (newValue) => {
  console.log('Обновлены данные заземления:', newValue)
}, { deep: true })

const letThoughtFly = () => {
  if (!thought.value) return
  
  isThoughtFlying.value = true
  showThought.value = true
  
  const thoughtElement = document.querySelector('.flying-thought')
  
  anime.timeline({
    easing: 'easeOutExpo',
    complete: () => {
      showThought.value = false
      setTimeout(() => {
        showCompletionMessage.value = true
      }, 500)
    }
  })
  .add({
    targets: '.input-container',
    opacity: 0,
    translateY: 20,
    duration: 600
  })
  .add({
    targets: thoughtElement,
    translateY: [-20, -300],
    translateX: [0, 200],
    opacity: [1, 0],
    scale: [1, 0.85],
    duration: 2000,
    delay: 200
  })
  .add({
    targets: '.particle',
    opacity: [1, 0],
    scale: [1, 0],
    translateX: function() { return anime.random(-100, 100) },
    translateY: function() { return anime.random(-100, 0) },
    duration: 1500,
    delay: anime.stagger(100),
    easing: 'easeOutExpo'
  }, '-=2000')
}

const resetExercise = () => {
  thought.value = ''
  isThoughtFlying.value = false
  showThought.value = false
  showCompletionMessage.value = false
}

const getVisualPlaceholder = (index) => {
  const examples = [
    'Example: window',
    'Example: table',
    'Example: plant',
    'Example: book',
    'Example: cup'
  ]
  return examples[index - 1]
}

const getTactilePlaceholder = (index) => {
  const examples = [
    'Example: warmth',
    'Example: cold',
    'Example: movement',
    'Example: pressure'
  ]
  return examples[index - 1]
}

const getAuditoryPlaceholder = (index) => {
  const examples = [
    'Example: noise',
    'Example: silence',
    'Example: birds singing'
  ]
  return examples[index - 1]
}

const getOlfactoryPlaceholder = (index) => {
  const examples = [
    'Example: flowers',
    'Example: food',
    'Example: water'
  ]
  return examples[index - 1]
}

const getGustatoryPlaceholder = () => {
  const examples = [
    'Example: sweetness',
    'Example: sourness',
    'Example: saltiness'
  ]
  return examples[Math.floor(Math.random() * examples.length)]
}

const checkStepCompletion = () => {
  switch(groundingStep.value) {
    case 0:
      isCurrentStepComplete.value = grounding.value.see.some(item => item.trim() !== '')
      break
    case 1:
      isCurrentStepComplete.value = grounding.value.feel.some(item => item.trim() !== '')
      break
    case 2:
      isCurrentStepComplete.value = grounding.value.hear.some(item => item.trim() !== '')
      break
    case 3:
      isCurrentStepComplete.value = grounding.value.smell.some(item => item.trim() !== '')
      break
    case 4:
      isCurrentStepComplete.value = grounding.value.taste.trim() !== ''
      break
  }
}

const nextGroundingStep = () => {
  groundingStep.value++
  isCurrentStepComplete.value = false
}

const resetGrounding = () => {
  groundingStep.value = 0
  grounding.value = {
    see: ['', '', '', '', ''],
    feel: ['', '', '', ''],
    hear: ['', '', ''],
    smell: ['', ''],
    taste: ''
  }
}
</script>

<style scoped>
.content-container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 0 20px;
}

.content-card {
  background: white;
  border-radius: 20px;
  padding: 40px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
}

.section-title {
  font-size: 32px;
  font-weight: 700;
  color: #15293E;
  margin-bottom: 16px;
}

.description {
  font-size: 18px;
  color: #696E76;
  margin-bottom: 32px;
  line-height: 1.6;
}

.exercise-card {
  background: white;
  border-radius: 12px;
  padding: 30px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  margin-top: 20px;
}

.animation-container {
  position: relative;
  width: 300px;
  height: 400px;
  margin: 20px auto;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.breathing-text {
  position: absolute;
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  font-size: 24px;
  font-weight: 500;
  color: #2864A4;
  text-align: center;
  background: rgba(255, 255, 255, 0.9);
  padding: 8px 16px;
  border-radius: 8px;
  z-index: 1;
}

.breathing-button {
  margin-top: 20px !important;
  width: 120px !important;
}

.grounding-steps {
  margin-top: 40px;
}

.progress-circles {
  display: flex;
  justify-content: space-between;
  margin: 40px 0;
  padding: 0 20px;
}

.progress-step {
  display: flex;
  flex-direction: column;
  align-items: center;
  opacity: 0.5;
  transition: all 0.3s ease;
}

.progress-step.active {
  opacity: 1;
  transform: scale(1.1);
}

.progress-step.completed {
  opacity: 0.8;
}

.step-icon {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: #F0F7FF;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 8px;
  transition: all 0.3s ease;
}

.active .step-icon {
  background: #2864A4;
  color: white;
  box-shadow: 0 4px 12px rgba(40, 100, 164, 0.2);
}

.step-name {
  font-size: 14px;
  color: #696E76;
}

.active .step-name {
  color: #2864A4;
  font-weight: 600;
}

.input-cards {
  display: flex;
  flex-direction: column;
  gap: 16px;
  margin-top: 24px;
}

.input-card {
  background: white;
  border-radius: 12px;
  padding: 16px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
}

.input-card.filled {
  background: #F0F7FF;
  border-left: 4px solid #2864A4;
}

.step-header {
  margin-bottom: 24px;
}

.step-header h4 {
  font-size: 24px;
  color: #15293E;
  margin-bottom: 8px;
}

.step-hint {
  color: #696E76;
  font-size: 16px;
}

.step-navigation {
  margin-top: 20px;
  display: flex;
  justify-content: flex-end;
}

.fade-slide-enter-active,
.fade-slide-leave-active {
  transition: all 0.3s ease;
}

.fade-slide-enter-from {
  opacity: 0;
  transform: translateX(20px);
}

.fade-slide-leave-to {
  opacity: 0;
  transform: translateX(-20px);
}

.completion-message {
  text-align: center;
  padding: 40px;
  background: #F8F9FC;
  border-radius: 12px;
  margin-top: 30px;
}

.completion-message h4 {
  color: #2864A4;
  margin-bottom: 12px;
}

.completion-message p {
  color: #696E76;
  margin-bottom: 24px;
}

.video-container {
  position: relative;
  width: 100%;
  margin: 30px 0;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.video-container iframe {
  display: block;
  border-radius: 12px;
}

.feedback-section {
  margin-top: 40px;
  text-align: center;
}

.feedback-buttons {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin-top: 20px;
}

:deep(.el-tabs__nav) {
  margin-bottom: 20px;
}

.thoughts-exercise {
  display: flex;
  flex-direction: column;
  gap: 20px;
  max-width: 600px;
  margin: 40px auto;
}

.release-button {
  align-self: center;
  background: linear-gradient(135deg, #91C4FF 0%, #6BA6FF 100%);
  border: none;
  color: white;
  padding: 12px 32px;
  font-weight: 500;
  transition: all 0.3s ease;
}

.release-button:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(145, 196, 255, 0.4);
}

.release-button:disabled {
  background: #E5E7EB;
  cursor: not-allowed;
}

.flying-thought-container {
  height: 400px;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
}

.flying-thought {
  position: relative;
  background: linear-gradient(135deg, #91C4FF 0%, #F0F7FF 100%);
  padding: 20px;
  border-radius: 20px;
  box-shadow: 
    0 4px 12px rgba(145, 196, 255, 0.3),
    0 8px 24px rgba(145, 196, 255, 0.2);
  max-width: 400px;
  text-align: center;
  color: #15293E;
  font-size: 16px;
  line-height: 1.5;
  border: 1px solid rgba(255, 255, 255, 0.4);
  backdrop-filter: blur(8px);
  z-index: 2;
}

.particles {
  position: absolute;
  width: 100%;
  height: 100%;
  z-index: 1;
}

.particle {
  position: absolute;
  width: 8px;
  height: 8px;
  background: linear-gradient(135deg, #91C4FF 0%, #F0F7FF 100%);
  border-radius: 50%;
  opacity: 0.6;
}

.fade-enter-active,
.fade-leave-active {
  transition: opacity 0.5s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
}

@media (max-width: 768px) {
  .content-container {
    padding: 0 16px;
  }
  
  .content-card {
    padding: 24px;
    border-radius: 16px;
  }
  
  .exercise-card {
    padding: 20px;
  }
}

:deep(.el-button--primary) {
  background: linear-gradient(135deg, #91C4FF 0%, #6BA6FF 100%);
  border: none;
  padding: 12px 32px;
  font-weight: 500;
  transition: all 0.3s ease;
}

:deep(.el-button--primary:hover:not(:disabled)) {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(145, 196, 255, 0.4);
}

:deep(.el-button--primary:disabled) {
  background: #E5E7EB;
  opacity: 0.7;
}
</style>

================
File: src/views/HomePage.vue
================
<template>
  <div class="content-container">
    <div class="content-card">
      <h2 class="section-title">Emergency Psychological Support</h2>
      <p class="description">
        We provide professional psychological support online. 
        Our specialists are ready to help you cope with any life situations.
      </p>

      <div class="action-buttons">
        <el-button class="transparent-button" @click="$router.push('/hotline')">
          I Need Help
        </el-button>
        <el-button class="transparent-button" @click="$router.push('/exercises')">
          Relieve Stress
        </el-button>
        <el-button class="transparent-button" @click="$router.push('/hotline')">
          I Want to Talk
        </el-button>
      </div>
    </div>
  </div>
</template>

<script>
import { useHead } from '@vueuse/head'

export default {
  name: 'HomePage',
  methods: {
    startDiagnostics() {
      this.$router.push('/diagnostics')
    }
  },
  setup() {
    useHead({
      title: 'How to Calm Anxiety Quickly | Online Stress Relief',
      meta: [
        { name: 'description', content: 'Discover quick and effective techniques to calm anxiety and manage stress. Breathing exercises, grounding techniques, and more.' },
        { name: 'keywords', content: 'calm anxiety, stress relief, breathing exercises, grounding techniques, mental health hotline' }
      ]
    })

    return {}
  }
}
</script>

<style scoped>
.content-container {
  padding: 30px 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.content-card {
  background: white;
  border-radius: 16px;
  padding: 40px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  text-align: center;
}

.section-title {
  font-size: 48px;
  font-weight: 700;
  color: #15293E;
  margin-bottom: 24px;
}

.description {
  font-family: 'Lora', serif;
  font-size: 18px;
  color: #696E76;
  max-width: 600px;
  margin: 0 auto 48px;
  line-height: 1.6;
  text-align: center;
}

.action-buttons {
  display: flex;
  justify-content: center;
  gap: 20px;
  margin: 32px auto;
}

/* Новый стиль для прозрачных кнопок */
.transparent-button {
  width: 145px !important;
  height: 45px !important;
  border: 2px solid #15293E !important;
  border-radius: 10px !important;
  background: transparent !important;
  color: #15293E !important;
  font-family: 'Montserrat', sans-serif !important;
  font-size: 16px !important;
  font-weight: 400 !important;
  letter-spacing: 0.01em !important;
  padding: 0 !important;
  transition: all 0.3s ease !important;
}

.transparent-button:hover {
  background: rgba(21, 41, 62, 0.05) !important;
  transform: translateY(-2px);
}

/* Медиа-запрос для мобильных устройств */
@media (max-width: 768px) {
  .action-buttons {
    flex-direction: column;
    align-items: center;
  }
  
  .transparent-button {
    width: 200px !important;
  }
}

/* Стили для Element Plus компонентов */
:deep(.el-button--primary) {
  background-color: #2864A4;
  border-color: #2864A4;
  padding: 12px 40px;
  font-size: 16px;
  height: auto;
  border-radius: 10px;
}

:deep(.el-button--primary:hover) {
  background-color: #1e4f8a;
  border-color: #1e4f8a;
}

:deep(.el-button--danger) {
  background-color: #E31235;
  border-color: #E31235;
}

:deep(.el-button--danger:hover) {
  background-color: #c01030;
  border-color: #c01030;
}

:deep(.el-button--success) {
  background-color: #67C23A;
  border-color: #67C23A;
}

:deep(.el-button--success:hover) {
  background-color: #529b2e;
  border-color: #529b2e;
}

:deep(.el-card) {
  border: none;
  transition: transform 0.3s ease;
}

:deep(.el-card:hover) {
  transform: translateY(-5px);
}

:deep(.el-card__body) {
  padding: 0;
}
</style>

================
File: src/views/HotlinePage.vue
================
<template>
  <div class="content-container">
    <div class="content-card">
      <h2 class="section-title">Emergency Support</h2>
      <p class="description">
        If you need immediate support, our specialists are available 24/7
        to help you through any crisis.
      </p>

      <div class="hotline-content">
        <el-alert
          type="warning"
          :closable="false"
          show-icon
        >
          <p>
            If you are in a critical situation or feel that you might
            harm yourself or others, immediately call emergency services.
          </p>
        </el-alert>

        <div class="hotlines-grid">
          <el-card v-for="hotline in hotlines" :key="hotline.id" class="hotline-card">
            <h3>{{ hotline.name }}</h3>
            <p class="hotline-description">{{ hotline.description }}</p>
            
            <div class="hotline-number">
              <span class="number">{{ hotline.number }}</span>
              <div class="number-actions">
                <el-button 
                  type="primary" 
                  circle
                  @click="copyNumber(hotline.number)"
                >
                  <el-icon class="copy-icon"><CopyDocument /></el-icon>
                </el-button>
                <el-button 
                  type="success" 
                  circle
                  @click="callNumber(hotline.number)"
                >
                  <el-icon class="phone-icon"><Phone /></el-icon>
                </el-button>
              </div>
            </div>

            <div class="hotline-info">
              <el-tag v-if="hotline.hours === '24/7'" type="success" class="icon-24-7">24/7</el-tag>
              <el-tag v-else>{{ hotline.hours }}</el-tag>
              <el-tag v-if="hotline.free" type="info">Free</el-tag>
            </div>
          </el-card>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { CopyDocument, Phone } from '@element-plus/icons-vue'
import { ElMessage } from 'element-plus'

export default {
  name: 'HotlinePage',
  
  components: {
    CopyDocument,
    Phone
  },

  data() {
    return {
      hotlines: [
        {
          id: 1,
          name: "National Suicide & Crisis Lifeline",
          description: "24/7 support for people experiencing emotional crisis",
          number: "988",
          hours: "24/7",
          free: true
        },
        {
          id: 2,
          name: "Crisis Text Line",
          description: "Text HELLO to 741741 for support",
          number: "741741",
          hours: "24/7",
          free: true
        },
        {
          id: 3,
          name: "National Domestic Violence Hotline",
          description: "Support for those experiencing domestic violence",
          number: "1-800-799-7233",
          hours: "24/7",
          free: true
        },
        // Добавьте другие горячие линии здесь
      ]
    }
  },

  methods: {
    async copyNumber(number) {
      try {
        await navigator.clipboard.writeText(number);
        ElMessage({
          message: 'Number copied to clipboard',
          type: 'success'
        });
      } catch (err) {
        ElMessage.error('Failed to copy number');
      }
    },

    callNumber(number) {
      window.location.href = `tel:${number.replace(/[-]/g, '')}`;
    }
  }
}
</script>

<style scoped>
.content-container {
  padding: 30px 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.content-card {
  background: white;
  border-radius: 16px;
  padding: 40px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.section-title {
  font-size: 32px;
  font-weight: 700;
  color: #15293E;
  margin-bottom: 16px;
}

.hotline-content {
  margin-top: 40px;
}

.hotlines-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 30px;
  margin-top: 30px;
}

.hotline-card {
  background: white;
  border-radius: 10px;
}

.hotline-description {
  color: #696E76;
  margin: 15px 0;
}

.hotline-number {
  background: #F8F9FC;
  border-radius: 8px;
  padding: 15px;
  margin: 20px 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.number {
  font-size: 20px;
  font-weight: bold;
  color: #2864A4;
}

.number-actions {
  display: flex;
  gap: 10px;
}

.hotline-info {
  display: flex;
  gap: 10px;
  margin-top: 20px;
}

:deep(.el-alert) {
  margin-bottom: 30px;
}

:deep(.el-tag) {
  border-radius: 4px;
}

/* Цвета для иконок */
.phone-icon {
  fill: #A8E6CF; /* Светло-зеленый для иконки звонка */
}

.copy-icon {
  fill: #D0F0FD; /* Светло-голубой для иконки копирования */
}

/* Цвета для значков "24/7" и "Free" */
.icon-24-7 {
  background: #F4F9FF; /* Нежный голубой фон */
  color: #4A90E2; /* Синий текст для акцента */
}
</style>

================
File: src/views/OnboardingPage.vue
================
<template>
  <div class="content-container">
    <div class="content-card">
      <h1 class="main-title">We're here to help you through difficult times</h1>
      <p class="description">
        Our platform provides immediate psychological support and practical tools to help you cope with stress and anxiety.
      </p>

      <div class="onboarding-actions">
        <el-button type="primary" class="start-button" @click="startApp">
          Start
        </el-button>
        <el-button text @click="skipOnboarding" class="skip-button">
          Skip
        </el-button>
      </div>
    </div>
  </div>
</template>

<script>
import { useRouter } from 'vue-router'
import { useStore } from 'vuex'

export default {
  name: 'OnboardingPage',
  
  setup() {
    const router = useRouter()
    const store = useStore()

    const startApp = () => {
      store.commit('setVisitedBefore')
      router.push('/home')
    }

    const skipOnboarding = () => {
      store.commit('setVisitedBefore')
      router.push('/home')
    }

    return {
      startApp,
      skipOnboarding
    }
  },
  
  mounted() {
    localStorage.setItem('visitedBefore', 'true')
  }
}
</script>

<style scoped>
.content-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  padding: 20px;
}

.content-card {
  max-width: 600px;
  text-align: center;
}

.main-title {
  font-family: var(--font-heading);
  font-size: 48px;
  font-weight: 700;
  color: #15293E;
  margin-bottom: 24px;
  line-height: 1.2;
}

.description {
  font-family: var(--font-body);
  font-size: 20px;
  color: #696E76;
  margin-bottom: 48px;
  line-height: 1.6;
}

.onboarding-actions {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 16px;
}

.start-button {
  width: 200px;
  height: 50px;
  font-size: 18px;
}

.skip-button {
  font-size: 16px;
  color: #696E76;
}

@media (max-width: 768px) {
  .main-title {
    font-size: 36px;
  }
  
  .description {
    font-size: 18px;
  }
  
  .content-card {
    padding: 24px;
  }
}
</style>

================
File: src/views/ProfilePage.vue
================
<template>
  <div class="breadcrumbs">
    <span>Подписчик</span>
    <span>Личный кабинет</span>
    <span>Настройки профиля</span>
  </div>

  <div class="container">
    <div class="header">
      <div class="logo">
        <div class="logo-icon">THNX</div>
        <span>спасибо</span>
      </div>
      <div class="user-icon"></div>
    </div>

    <div class="main-content">
      <div class="sidebar">
        <router-link to="/profile" class="menu-item active">Настройки профиля</router-link>
        <div class="menu-divider"></div>
        <router-link to="/subscriptions" class="menu-item">Подписки</router-link>
        <a @click="logout" class="menu-item">Выход из аккаунта</a>
      </div>

      <div class="content">
        <h2 class="section-title">Личные данные</h2>
        
        <div class="form-group">
          <label>E-mail*</label>
          <div class="input-field" v-if="!isEditingEmail">
            <span>{{ user.email }}</span>
            <button class="edit-button" @click="startEditingEmail">изменить</button>
          </div>
          <el-input
            v-else
            v-model="editedEmail"
            @blur="saveEmail"
            @keyup.enter="saveEmail"
            ref="emailInput"
          />
        </div>

        <div class="form-group">
          <label>Имя и Фамилия*</label>
          <div class="input-field" v-if="!isEditingName">
            <span>{{ user.name }}</span>
            <button class="edit-button" @click="startEditingName">изменить</button>
          </div>
          <el-input
            v-else
            v-model="editedName"
            @blur="saveName"
            @keyup.enter="saveName"
            ref="nameInput"
          />
        </div>

        <h2 class="section-title">Оповещения</h2>
        <div class="notification-row">
          <span>E-mail оповещение о новом посте</span>
          <el-switch
            v-model="emailNotifications"
            @change="updateNotifications"
          />
        </div>

        <div class="hint-box">
          <p>Все изменения в настройках сохраняются автоматически</p>
        </div>
      </div>
    </div>

    <div class="footer">
      <div class="footer-logo">THNX</div>
      <router-link to="/privacy">Политика конфиденциальности</router-link>
      <router-link to="/terms">Договор оферта</router-link>
      <span>Работает на <span class="open-source">Open Source</span></span>
    </div>
  </div>
</template>

<script>
import { ref, computed, nextTick } from 'vue';
import { useStore } from 'vuex';
import { useRouter } from 'vue-router';
import { ElMessage } from 'element-plus';

export default {
  name: 'ProfilePage',
  setup() {
    const store = useStore();
    const router = useRouter();
    
    const emailInput = ref(null);
    const nameInput = ref(null);
    
    const isEditingEmail = ref(false);
    const isEditingName = ref(false);
    const editedEmail = ref('');
    const editedName = ref('');
    const emailNotifications = ref(store.state.notificationsEnabled);

    const user = computed(() => store.state.user);

    const startEditingEmail = () => {
      editedEmail.value = user.value.email;
      isEditingEmail.value = true;
      nextTick(() => {
        if (emailInput.value) {
          emailInput.value.focus();
        }
      });
    };

    const startEditingName = () => {
      editedName.value = user.value.name;
      isEditingName.value = true;
      nextTick(() => {
        if (nameInput.value) {
          nameInput.value.focus();
        }
      });
    };

    const saveEmail = async () => {
      if (editedEmail.value && editedEmail.value !== user.value.email) {
        try {
          await store.dispatch('updateUserEmail', editedEmail.value);
          ElMessage.success('Email успешно обновлен');
        } catch (error) {
          ElMessage.error('Ошибка при обновлении email');
        }
      }
      isEditingEmail.value = false;
    };

    const saveName = async () => {
      if (editedName.value && editedName.value !== user.value.name) {
        try {
          await store.dispatch('updateUserName', editedName.value);
          ElMessage.success('Имя успешно обновлено');
        } catch (error) {
          ElMessage.error('Ошибка при обновлении имени');
        }
      }
      isEditingName.value = false;
    };

    const updateNotifications = (value) => {
      store.commit('toggleNotifications');
      ElMessage.success(`Уведомления ${value ? 'включены' : 'выключены'}`);
    };

    const logout = async () => {
      try {
        await store.dispatch('logout');
        router.push('/login');
        ElMessage.success('Вы успешно вышли из системы');
      } catch (error) {
        ElMessage.error('Ошибка при выходе из системы');
      }
    };

    return {
      user,
      isEditingEmail,
      isEditingName,
      editedEmail,
      editedName,
      emailNotifications,
      emailInput,
      nameInput,
      startEditingEmail,
      startEditingName,
      saveEmail,
      saveName,
      updateNotifications,
      logout
    };
  }
};
</script>

<style scoped>
.breadcrumbs {
  padding: 20px 130px;
  color: #656970;
  font-size: 14px;
}

.breadcrumbs span:not(:last-child):after {
  content: " / ";
  color: #656970;
}

.container {
  max-width: 1440px;
  margin: 0 auto;
  position: relative;
}

.header {
  padding: 20px 130px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.logo {
  display: flex;
  align-items: center;
  gap: 15px;
}

.logo-icon {
  background: #E31235;
  width: 50px;
  height: 50px;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
}

.logo-icon img {
  width: 50px;
  height: 38px;
}

.logo-line {
  position: absolute;
  width: 31.38px;
  height: 7.93px;
  left: 9px;
  top: 12px;
  border: 2px solid white;
}

.logo-text {
  font-family: 'Gilroy';
  font-weight: 700;
  font-size: 28px;
  color: #15293E;
}

.user-icon {
  width: 50px;
  height: 50px;
  background: #FFFFFF;
  box-shadow: 0px 0px 40px 1px #F0F0F0;
  border-radius: 40px;
}

.main-content {
  padding: 0 130px;
  display: flex;
  gap: 30px;
  margin-top: 20px;
}

.sidebar {
  width: 200px;
  background: white;
  border-radius: 10px;
  box-shadow: 0px 0px 40px rgba(0, 0, 0, 0.05);
  padding: 20px;
}

.menu-item {
  padding: 10px 0;
  color: #696E76;
  text-decoration: none;
  cursor: pointer;
  display: block;
}

.menu-item.active {
  color: #15293E;
  font-weight: 600;
}

.menu-item:hover {
  color: #15293E;
}

.menu-divider {
  height: 1px;
  background: #F0F1F6;
  margin: 10px 0;
}

.content {
  flex: 1;
  background: white;
  border-radius: 10px;
  box-shadow: 0px 0px 40px rgba(0, 0, 0, 0.05);
  padding: 40px;
  position: relative;
  max-width: 950px;
}

.section-title {
  font-size: 28px;
  font-weight: 700;
  color: #15293E;
  margin-bottom: 30px;
}

.form-group {
  margin-bottom: 30px;
}

.form-group label {
  display: block;
  color: #696E76;
  margin-bottom: 10px;
}

.input-field {
  background: #F8F9FC;
  border-radius: 10px;
  padding: 12px 20px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 360px;
}

.input-field span {
  font-family: 'SF Pro Display';
  font-size: 16px;
  color: #15293E;
}

.edit-button {
  color: #2864A4;
  background: none;
  border: none;
  cursor: pointer;
  font-size: 14px;
}

.notification-title {
  margin-top: 40px;
}

.notification-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  color: #696E76;
  margin-top: 20px;
}

.notification-row span {
  font-family: 'Gilroy';
  font-size: 16px;
  color: #696E76;
}

.toggle-switch {
  width: 44px;
  height: 24px;
  background: #2864A4;
  border-radius: 20px;
  position: relative;
}

.toggle-switch::after {
  content: '';
  position: absolute;
  width: 20px;
  height: 20px;
  background: #FFFFFF;
  border-radius: 50%;
  right: 2px;
  top: 2px;
}

.hint-box {
  position: absolute;
  right: 40px;
  top: 40px;
  background: #F0F1F6;
  border-radius: 10px;
  padding: 15px 20px;
  width: 220px;
  text-align: center;
  color: #696E76;
  font-size: 14px;
}

.hint-box p {
  font-family: 'SF Pro Display';
  font-size: 14px;
  color: #696E76;
  text-align: center;
}

.footer {
  margin-top: 40px;
  background: #F0F1F6;
  padding: 25px 130px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 185px;
}

.footer-logo {
  background: #E31235;
  width: 50px;
  height: 38px;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
}

.footer-logo img {
  width: 50px;
  height: 38px;
}

.footer-logo-line {
  position: absolute;
  width: 31.38px;
  height: 7.93px;
  left: 9px;
  top: 12px;
  border: 2px solid white;
}

.open-source {
  color: #2864A4;
}

.el-input {
  margin-top: 10px;
}

.el-switch {
  transition: all 0.3s ease;
}

.footer a {
  color: inherit;
  text-decoration: none;
}

.footer a:hover {
  color: #2864A4;
}

/* Стили для Element Plus компонентов */
:deep(.el-input__inner) {
  background: #F8F9FC;
  border: none;
  border-radius: 10px;
  padding: 12px 20px;
  width: 360px;
}

:deep(.el-switch) {
  margin-left: 20px;
}

:deep(.el-switch.is-checked .el-switch__core) {
  background-color: #2864A4;
  border-color: #2864A4;
}
</style>

================
File: src/views/SettingsPage.vue
================
<template>
  <div class="main-content">
    <div class="content">
      <h2 class="section-title">Settings</h2>
      <p class="description">
        Here you can customize application and notification settings
      </p>

      <div class="settings-section">
        <h3 class="subsection-title">Notifications</h3>
        
        <div class="settings-group">
          <div class="setting-item">
            <div class="setting-info">
              <span class="setting-label">Email notifications</span>
              <span class="setting-description">Receive notifications about new materials via email</span>
            </div>
            <el-switch
              v-model="notificationsEnabled"
              @change="toggleNotifications"
            />
          </div>

          <div class="setting-item">
            <div class="setting-info">
              <span class="setting-label">Push notifications</span>
              <span class="setting-description">Receive notifications in browser</span>
            </div>
            <el-switch
              v-model="pushNotifications"
              @change="togglePushNotifications"
            />
          </div>
        </div>
      </div>

      <div class="settings-section">
        <h3 class="subsection-title">Внешний вид</h3>
        
        <div class="settings-group">
          <div class="setting-item">
            <div class="setting-info">
              <span class="setting-label">Темная тема</span>
              <span class="setting-description">Включить темный режим интерфейса</span>
            </div>
            <el-switch
              v-model="darkMode"
              @change="toggleTheme"
            />
          </div>
        </div>
      </div>

      <div class="hint-box">
        <p>Все изменения в настройках сохраняются автоматически</p>
      </div>
    </div>

    <div class="footer">
      <div class="footer-logo">
        <el-icon><StarFilled /></el-icon>
      </div>
      <router-link to="/privacy">Политика конфиденциальности</router-link>
      <router-link to="/terms">Договор оферта</router-link>
      <span>Работает на <span class="open-source">Open Source</span></span>
    </div>
  </div>
</template>

<script>
import { StarFilled } from '@element-plus/icons-vue'
import { mapState, mapMutations } from 'vuex';

export default {
  name: 'SettingsPage',
  components: {
    StarFilled
  },
  data() {
    return {
      pushNotifications: false,
      darkMode: false
    }
  },
  computed: {
    ...mapState(['notificationsEnabled']),
  },
  methods: {
    ...mapMutations(['toggleNotifications']),
    togglePushNotifications(value) {
      this.pushNotifications = value;
      this.$message({
        message: `Push-уведомления ${value ? 'включены' : 'выключены'}`,
        type: 'success'
      });
    },
    toggleTheme(value) {
      this.darkMode = value;
      this.$message({
        message: `Темная тема ${value ? 'включена' : 'выключена'}`,
        type: 'success'
      });
    }
  }
};
</script>

<style scoped>
.main-content {
  padding: 0 130px;
  margin-bottom: 100px;
  min-height: calc(100vh - 140px);
}

.content {
  background: white;
  border-radius: 10px;
  box-shadow: 0px 0px 40px rgba(0, 0, 0, 0.05);
  padding: 40px;
  position: relative;
}

.section-title {
  font-size: 28px;
  font-weight: 700;
  color: #15293E;
  margin-bottom: 16px;
}

.description {
  font-size: 16px;
  color: #696E76;
  margin-bottom: 40px;
  line-height: 1.6;
  max-width: 800px;
}

.settings-section {
  margin-bottom: 40px;
}

.subsection-title {
  font-size: 20px;
  font-weight: 600;
  color: #15293E;
  margin-bottom: 24px;
}

.settings-group {
  background: #F8F9FC;
  border-radius: 10px;
  padding: 20px;
}

.setting-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 16px 0;
}

.setting-item:not(:last-child) {
  border-bottom: 1px solid #E5E9F2;
}

.setting-info {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.setting-label {
  font-weight: 500;
  color: #15293E;
}

.setting-description {
  font-size: 14px;
  color: #696E76;
}

.hint-box {
  position: absolute;
  right: 40px;
  top: 40px;
  background: #F0F1F6;
  border-radius: 10px;
  padding: 15px 20px;
  width: 220px;
  text-align: center;
  color: #696E76;
  font-size: 14px;
}

.footer {
  margin-top: 40px;
  background: #F0F1F6;
  padding: 25px 130px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 185px;
}

.footer-logo {
  background: #E31235;
  width: 50px;
  height: 38px;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 20px;
}

.footer a {
  color: inherit;
  text-decoration: none;
}

.footer a:hover {
  color: #2864A4;
}

.open-source {
  color: #2864A4;
}

/* Стили для Element Plus компонентов */
:deep(.el-switch.is-checked .el-switch__core) {
  background-color: #2864A4;
  border-color: #2864A4;
}

:deep(.el-switch__core) {
  border-color: #E5E9F2;
}
</style>

================
File: src/views/TipsPage.vue
================
<template>
  <div class="container">
    <div class="main-content">
      <div class="content">
        <h2 class="section-title">Tips</h2>
        <p class="description">
          Here you'll find useful tips and recommendations that will help you
          improve your emotional state and cope with stress.
        </p>

        <el-row :gutter="30">
          <el-col :span="8" v-for="tip in tips" :key="tip.id">
            <el-card class="tip-card" shadow="hover">
              <div class="tip-icon">
                <el-icon><Reading /></el-icon>
              </div>
              <h3 class="tip-title">{{ tip.title }}</h3>
              <p class="tip-description">{{ tip.description }}</p>
              <div class="tip-tags">
                <el-tag 
                  v-for="tag in tip.tags" 
                  :key="tag"
                  size="small"
                  effect="plain"
                >
                  {{ tag }}
                </el-tag>
              </div>
            </el-card>
          </el-col>
        </el-row>

        <h3 class="categories-title">Categories</h3>
        <div class="categories">
          <div class="category-buttons">
            <el-button
              v-for="category in categories"
              :key="category.id"
              :class="{ active: activeCategory === category.id }"
              @click="filterByCategory(category.id)"
              class="category-button"
            >
              {{ category.name }}
            </el-button>
          </div>
        </div>
      </div>
    </div>

    <div class="footer">
      <div class="footer-logo">THNX</div>
      <router-link to="/privacy">Privacy Policy</router-link>
      <router-link to="/terms">Terms of Service</router-link>
      <span>Powered by <span class="open-source">Open Source</span></span>
    </div>
  </div>
</template>

<script>
import { Reading } from '@element-plus/icons-vue'

export default {
  name: 'TipsPage',
  components: {
    Reading
  },
  data() {
    return {
      activeCategory: null,
      categories: [
        { id: 1, name: 'All Tips' },
        { id: 2, name: 'Stress Management' },
        { id: 3, name: 'Meditation' },
        { id: 4, name: 'Healthy Sleep' },
        { id: 5, name: 'Self-help' }
      ],
      tips: [
        {
          id: 1,
          title: 'Breathing Exercises',
          description: 'Simple breathing techniques that will help quickly relieve stress and anxiety in any situation.',
          tags: ['Stress', 'Meditation'],
          categoryId: 2
        },
        {
          id: 2,
          title: 'Healthy Sleep',
          description: 'Recommendations for improving sleep quality and creating a proper daily routine.',
          tags: ['Sleep', 'Health'],
          categoryId: 4
        },
        {
          id: 3,
          title: 'Self-help Techniques',
          description: 'Effective self-help methods for anxiety states.',
          tags: ['Self-help', 'Anxiety'],
          categoryId: 5
        }
      ]
    };
  },
  methods: {
    filterByCategory(categoryId) {
      this.activeCategory = categoryId;
      // Здесь можно добавить логику фильтрации советов по категориям
    }
  }
};
</script>

<style scoped>
.container {
  max-width: 1440px;
  margin: 0 auto;
  position: relative;
  min-height: 100vh;
  background: #FAFAFD;
}

.main-content {
  padding: 0 130px;
  margin-bottom: 100px;
}

.content {
  background: white;
  border-radius: 10px;
  box-shadow: 0px 0px 40px rgba(0, 0, 0, 0.05);
  padding: 40px;
}

.section-title {
  font-size: 28px;
  font-weight: 700;
  color: #15293E;
  margin-bottom: 16px;
}

.description {
  font-size: 16px;
  color: #696E76;
  margin-bottom: 40px;
  line-height: 1.6;
  max-width: 800px;
}

.tip-card {
  height: 100%;
  transition: transform 0.3s ease;
}

.tip-card:hover {
  transform: translateY(-5px);
}

.tip-icon {
  color: #2864A4;
  font-size: 24px;
  margin-bottom: 16px;
}

.tip-title {
  font-size: 20px;
  font-weight: 600;
  color: #15293E;
  margin-bottom: 12px;
}

.tip-description {
  color: #696E76;
  line-height: 1.6;
  margin-bottom: 16px;
}

.tip-tags {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
}

.categories-title {
  font-size: 24px;
  font-weight: 600;
  color: #15293E;
  margin: 40px 0 20px;
}

.category-buttons {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  justify-content: center;
}

.category-button {
  min-width: 120px;
}

.category-button.active {
  background-color: #2864A4;
  color: white;
  border-color: #2864A4;
}

.footer {
  margin-top: 40px;
  background: #F0F1F6;
  padding: 25px 130px;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 185px;
}

.footer-logo {
  background: #E31235;
  width: 50px;
  height: 38px;
  border-radius: 5px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
}

.footer a {
  color: inherit;
  text-decoration: none;
}

.footer a:hover {
  color: #2864A4;
}

.open-source {
  color: #2864A4;
}

/* Стили для Element Plus компонентов */
:deep(.el-card) {
  border: none;
  border-radius: 10px;
  box-shadow: 0px 0px 40px rgba(0, 0, 0, 0.05);
}

:deep(.el-tag) {
  background: #F8F9FC;
  border-color: #F8F9FC;
  color: #696E76;
}

:deep(.el-row) {
  margin-bottom: 30px;
}
</style>

================
File: src/App.vue
================
<template>
  <div id="app">
    <nav-bar></nav-bar>
    <div class="page-container">
      <router-view></router-view>
    </div>
    <feedback-form></feedback-form>
  </div>
</template>

<script>
import NavBar from '@/components/NavBar.vue'
import FeedbackForm from '@/components/FeedbackForm.vue'
import { useHead } from '@vueuse/head'

export default {
  name: 'App',
  components: {
    NavBar,
    FeedbackForm
  },
  setup() {
    useHead({
      title: 'Immediate Help for Stress and Anxiety | Online Support',
      meta: [
        { name: 'description', content: 'Get immediate help for stress and anxiety with our online support. Breathing exercises, grounding techniques, and more.' },
        { name: 'keywords', content: 'stress relief, anxiety help, mental health support, breathing exercises, grounding techniques' },
        { name: 'author', content: 'Your Name' }
      ]
    })
  }
}
</script>

<style>
/* Добавляем глобальные стили для шрифтов */
:root {
  --font-heading: 'Montserrat', sans-serif;
  --font-body: 'Lora', serif;
}

#app {
  min-height: 100vh;
  background: #FAFAFD;
}

h1, h2, h3, h4, h5, h6 {
  font-family: var(--font-heading);
}

body {
  font-family: var(--font-body);
}

.page-container {
  min-height: calc(100vh - 60px); /* Высота минус высота навбара */
  padding-top: 20px;
  box-sizing: border-box;
}

/* Медиа-запросы для адаптивности */
@media (max-width: 768px) {
  .main-content {
    padding: 20px 16px;
  }

  .content {
    padding: 24px;
  }
}

/* Общие стили для всех страниц */
.content-container {
  padding: 30px 20px;
  max-width: 1200px;
  margin: 0 auto;
}

.content-card {
  background: white;
  border-radius: 16px;
  padding: 40px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.section-title {
  font-family: var(--font-heading);
  font-size: 32px;
  font-weight: 700;
  color: #15293E;
  margin-bottom: 16px;
}

.description {
  font-family: var(--font-body);
  font-size: 18px;
  color: #696E76;
  margin-bottom: 32px;
  line-height: 1.6;
}

@media (max-width: 768px) {
  .content-container {
    padding: 20px 16px;
  }
  
  .content-card {
    padding: 24px;
  }
  
  .section-title {
    font-size: 28px;
  }
}
</style>

================
File: src/main.js
================
import { createApp } from 'vue';
import App from './App.vue';
import ElementPlus from 'element-plus';
import 'element-plus/dist/index.css';
import './styles/element-variables.scss';
import router from './router';
import { store } from './store';
import { createHead } from '@vueuse/head'
import '@dotlottie/player-component'

const app = createApp(App);
const head = createHead()

app.use(head)
app.use(router);
app.use(ElementPlus);
app.use(store);

app.config.errorHandler = (err, vm, info) => {
  console.error('Error: ', err);
  console.error('Info: ', info);
};

app.mount('#app');

================
File: .gitignore
================
.DS_Store
node_modules
/dist


# local env files
.env.local
.env.*.local

# Log files
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: babel.config.js
================
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "baseUrl": "./",
    "moduleResolution": "node",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  }
}

================
File: package.json
================
{
  "name": "ifeellow",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint",
    "deploy": "npm run build && gh-pages -d dist --branch gh-pages"
  },
  "dependencies": {
    "@dotlottie/player-component": "^2.7.12",
    "@emailjs/browser": "^4.4.1",
    "@lottiefiles/dotlottie-vue": "^0.5.5",
    "@phosphor-icons/vue": "^2.2.1",
    "@vueuse/head": "^2.0.0",
    "animejs": "^3.2.2",
    "core-js": "^3.8.3",
    "element-plus": "^2.9.3",
    "gsap": "^3.12.7",
    "lottie-web": "^5.12.2",
    "sitemap": "^8.0.0",
    "vue": "^3.2.13",
    "vue-router": "^4.5.0",
    "vuex": "^4.1.0"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "eslint": "^7.32.0",
    "eslint-plugin-vue": "^8.0.3",
    "gh-pages": "^6.3.0",
    "json-loader": "^0.5.7",
    "sass": "^1.83.4",
    "sass-loader": "^16.0.4"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/vue3-essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "@babel/eslint-parser"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead",
    "not ie 11"
  ]
}

================
File: README.md
================
# ifeellow

## Project setup
```
npm install
```

### Compiles and hot-reloads for development
```
npm run serve
```

### Compiles and minifies for production
```
npm run build
```

### Lints and fixes files
```
npm run lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).

================
File: vue.config.js
================
const { defineConfig } = require('@vue/cli-service')
const path = require('path')

module.exports = defineConfig({
  publicPath: '/ifeellow/',
  transpileDependencies: true,
  configureWebpack: {
    resolve: {
      alias: {
        '@': path.resolve(__dirname, 'src/')
      }
    }
  },
  chainWebpack: config => {
    config.plugin('copy').tap(([options]) => {
      options.patterns.push({
        from: path.resolve(__dirname, 'public/breathing-animation.lottie'),
        to: path.resolve(__dirname, 'dist')
      })
      options.patterns.push({
        from: path.resolve(__dirname, 'public/sitemap.xml'),
        to: path.resolve(__dirname, 'dist')
      })
      return [options]
    })
    
    config.plugin('html').tap(args => {
      args[0].title = 'ifeellow - Psychological Support';
      return args;
    })
  }
})
